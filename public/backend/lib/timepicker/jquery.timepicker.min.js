!function(Q){function F(U){if(B[U])return B[U].exports;var I=B[U]={i:U,l:!1,exports:{}};return Q[U].call(I.exports,I,I.exports,F),I.l=!0,I.exports}var B={};F.m=Q,F.c=B,F.d=function(Q,B,U){F.o(Q,B)||Object.defineProperty(Q,B,{configurable:!1,enumerable:!0,get:U})},F.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(B,"a",B),B},F.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},F.p="",F(F.s=3)}([function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nvar ONE_DAY = 86400;\n\nexports.ONE_DAY = ONE_DAY;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdGltZXBpY2tlci9jb25zdGFudHMuanM/NTY5MSJdLCJuYW1lcyI6WyJPTkVfREFZIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQU1BLFVBQVUsS0FBaEI7O1FBRVNBLE8sR0FBQUEsTyIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgT05FX0RBWSA9IDg2NDAwO1xuXG5leHBvcnQgeyBPTkVfREFZIH07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdGltZXBpY2tlci9jb25zdGFudHMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _constants = __webpack_require__(0);\n\nvar roundingFunction = function roundingFunction(seconds, settings) {\n  if (seconds === null) {\n    return null;\n  } else if (typeof settings.step !== "number") {\n    // TODO: nearest fit irregular steps\n    return seconds;\n  } else {\n    var offset = seconds % (settings.step * 60); // step is in minutes\n\n    var start = settings.minTime || 0;\n\n    // adjust offset by start mod step so that the offset is aligned not to 00:00 but to the start\n    offset -= start % (settings.step * 60);\n\n    if (offset >= settings.step * 30) {\n      // if offset is larger than a half step, round up\n      seconds += settings.step * 60 - offset;\n    } else {\n      // round down\n      seconds -= offset;\n    }\n\n    return _moduloSeconds(seconds, settings);\n  }\n};\n\nfunction _moduloSeconds(seconds, settings) {\n  if (seconds == _constants.ONE_DAY && settings.show2400) {\n    return seconds;\n  }\n\n  return seconds % _constants.ONE_DAY;\n}\n\nexports.default = roundingFunction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdGltZXBpY2tlci9yb3VuZGluZy5qcz9lNGEzIl0sIm5hbWVzIjpbInJvdW5kaW5nRnVuY3Rpb24iLCJzZWNvbmRzIiwic2V0dGluZ3MiLCJzdGVwIiwib2Zmc2V0Iiwic3RhcnQiLCJtaW5UaW1lIiwiX21vZHVsb1NlY29uZHMiLCJzaG93MjQwMCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBRUEsSUFBTUEsbUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBQ0MsT0FBRCxFQUFVQyxRQUFWLEVBQXVCO0FBQzlDLE1BQUlELFlBQVksSUFBaEIsRUFBc0I7QUFDcEIsV0FBTyxJQUFQO0FBQ0QsR0FGRCxNQUVPLElBQUksT0FBT0MsU0FBU0MsSUFBaEIsS0FBeUIsUUFBN0IsRUFBdUM7QUFDNUM7QUFDQSxXQUFPRixPQUFQO0FBQ0QsR0FITSxNQUdBO0FBQ0wsUUFBSUcsU0FBU0gsV0FBV0MsU0FBU0MsSUFBVCxHQUFnQixFQUEzQixDQUFiLENBREssQ0FDd0M7O0FBRTdDLFFBQUlFLFFBQVFILFNBQVNJLE9BQVQsSUFBb0IsQ0FBaEM7O0FBRUE7QUFDQUYsY0FBVUMsU0FBU0gsU0FBU0MsSUFBVCxHQUFnQixFQUF6QixDQUFWOztBQUVBLFFBQUlDLFVBQVVGLFNBQVNDLElBQVQsR0FBZ0IsRUFBOUIsRUFBa0M7QUFDaEM7QUFDQUYsaUJBQVdDLFNBQVNDLElBQVQsR0FBZ0IsRUFBaEIsR0FBcUJDLE1BQWhDO0FBQ0QsS0FIRCxNQUdPO0FBQ0w7QUFDQUgsaUJBQVdHLE1BQVg7QUFDRDs7QUFFRCxXQUFPRyxlQUFlTixPQUFmLEVBQXdCQyxRQUF4QixDQUFQO0FBQ0Q7QUFDRixDQXhCRDs7QUEwQkEsU0FBU0ssY0FBVCxDQUF3Qk4sT0FBeEIsRUFBaUNDLFFBQWpDLEVBQTJDO0FBQ3pDLE1BQUlELGlDQUFzQkMsU0FBU00sUUFBbkMsRUFBNkM7QUFDM0MsV0FBT1AsT0FBUDtBQUNEOztBQUVELFNBQU9BLDRCQUFQO0FBQ0Q7O2tCQUVjRCxnQiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT05FX0RBWSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuY29uc3Qgcm91bmRpbmdGdW5jdGlvbiA9IChzZWNvbmRzLCBzZXR0aW5ncykgPT4ge1xuICBpZiAoc2Vjb25kcyA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzZXR0aW5ncy5zdGVwICE9PSBcIm51bWJlclwiKSB7XG4gICAgLy8gVE9ETzogbmVhcmVzdCBmaXQgaXJyZWd1bGFyIHN0ZXBzXG4gICAgcmV0dXJuIHNlY29uZHM7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG9mZnNldCA9IHNlY29uZHMgJSAoc2V0dGluZ3Muc3RlcCAqIDYwKTsgLy8gc3RlcCBpcyBpbiBtaW51dGVzXG5cbiAgICB2YXIgc3RhcnQgPSBzZXR0aW5ncy5taW5UaW1lIHx8IDA7XG5cbiAgICAvLyBhZGp1c3Qgb2Zmc2V0IGJ5IHN0YXJ0IG1vZCBzdGVwIHNvIHRoYXQgdGhlIG9mZnNldCBpcyBhbGlnbmVkIG5vdCB0byAwMDowMCBidXQgdG8gdGhlIHN0YXJ0XG4gICAgb2Zmc2V0IC09IHN0YXJ0ICUgKHNldHRpbmdzLnN0ZXAgKiA2MCk7XG5cbiAgICBpZiAob2Zmc2V0ID49IHNldHRpbmdzLnN0ZXAgKiAzMCkge1xuICAgICAgLy8gaWYgb2Zmc2V0IGlzIGxhcmdlciB0aGFuIGEgaGFsZiBzdGVwLCByb3VuZCB1cFxuICAgICAgc2Vjb25kcyArPSBzZXR0aW5ncy5zdGVwICogNjAgLSBvZmZzZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJvdW5kIGRvd25cbiAgICAgIHNlY29uZHMgLT0gb2Zmc2V0O1xuICAgIH1cblxuICAgIHJldHVybiBfbW9kdWxvU2Vjb25kcyhzZWNvbmRzLCBzZXR0aW5ncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX21vZHVsb1NlY29uZHMoc2Vjb25kcywgc2V0dGluZ3MpIHtcbiAgaWYgKHNlY29uZHMgPT0gT05FX0RBWSAmJiBzZXR0aW5ncy5zaG93MjQwMCkge1xuICAgIHJldHVybiBzZWNvbmRzO1xuICB9XG5cbiAgcmV0dXJuIHNlY29uZHMgJSBPTkVfREFZO1xufVxuXG5leHBvcnQgZGVmYXVsdCByb3VuZGluZ0Z1bmN0aW9uO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3RpbWVwaWNrZXIvcm91bmRpbmcuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,exports){eval("module.exports = jQuery;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJqUXVlcnlcIj8wY2I4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImpRdWVyeVwiXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /*!\n                                                                                                                                                                                                                                                                               * jquery-timepicker v1.11.14 - A jQuery timepicker plugin inspired by Google Calendar. It supports both mouse and keyboard navigation.\n                                                                                                                                                                                                                                                                               * Copyright (c) 2015 Jon Thornton - http://jonthornton.github.com/jquery-timepicker/\n                                                                                                                                                                                                                                                                               * License: MIT\n                                                                                                                                                                                                                                                                               */\n\n// import jQuery from \'jquery\';\n\n\nvar _timepicker = __webpack_require__(5);\n\nvar _timepicker2 = _interopRequireDefault(_timepicker);\n\nvar _rounding = __webpack_require__(1);\n\nvar _rounding2 = _interopRequireDefault(_rounding);\n\nvar _constants = __webpack_require__(0);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function (factory) {\n  if (( false ? \'undefined\' : _typeof(exports)) === "object" && exports && ( false ? \'undefined\' : _typeof(module)) === "object" && module && module.exports === exports) {\n    // Browserify. Attach to jQuery module.\n    factory(__webpack_require__(2));\n  } else if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  var _lang = {};\n\n  var methods = {\n    init: function init(options) {\n      return this.each(function () {\n        var self = $(this);\n\n        var tp = new _timepicker2.default(this, options);\n        var settings = tp.settings;\n        _lang = settings.lang;\n\n        self.data("timepicker-settings", settings);\n        self.data("timepicker-obj", tp);\n        self.addClass("ui-timepicker-input");\n\n        if (settings.useSelect) {\n          _render(self);\n        } else {\n          self.prop("autocomplete", "off");\n          if (settings.showOn) {\n            for (var i in settings.showOn) {\n              self.on(settings.showOn[i] + ".timepicker", methods.show);\n            }\n          }\n          self.on("change.timepicker", _formatValue);\n          self.on("keydown.timepicker", _keydownhandler);\n          self.on("keyup.timepicker", _keyuphandler);\n          if (settings.disableTextInput) {\n            self.on("keydown.timepicker", _disableTextInputHandler);\n          }\n          self.on("cut.timepicker", _keyuphandler);\n          self.on("paste.timepicker", _keyuphandler);\n\n          _formatValue.call(self.get(0), null, "initial");\n        }\n      });\n    },\n\n    show: function show(e) {\n      var self = $(this);\n      var settings = self.data("timepicker-settings");\n      var tp = self.data("timepicker-obj");\n\n      if (e) {\n        e.preventDefault();\n      }\n\n      if (settings.useSelect) {\n        self.data("timepicker-list").focus();\n        return;\n      }\n\n      if (_hideKeyboard(self)) {\n        // block the keyboard on mobile devices\n        self.blur();\n      }\n\n      var list = self.data("timepicker-list");\n\n      // check if input is readonly\n      if (self.prop("readonly")) {\n        return;\n      }\n\n      // check if list needs to be rendered\n      if (!list || list.length === 0 || typeof settings.durationTime === "function") {\n        _render(self);\n        list = self.data("timepicker-list");\n      }\n\n      if (_isVisible(list)) {\n        return;\n      }\n\n      self.data("ui-timepicker-value", self.val());\n      _setSelected(self, list);\n\n      // make sure other pickers are hidden\n      methods.hide();\n\n      // position the dropdown relative to the input\n      list.show();\n      var listOffset = {};\n\n      if (settings.orientation.match(/r/)) {\n        // right-align the dropdown\n        listOffset.left = self.offset().left + self.outerWidth() - list.outerWidth() + parseInt(list.css("marginLeft").replace("px", ""), 10);\n      } else {\n        // left-align the dropdown\n        listOffset.left = self.offset().left + parseInt(list.css("marginLeft").replace("px", ""), 10);\n      }\n\n      var verticalOrientation;\n      if (settings.orientation.match(/t/)) {\n        verticalOrientation = "t";\n      } else if (settings.orientation.match(/b/)) {\n        verticalOrientation = "b";\n      } else if (self.offset().top + self.outerHeight(true) + list.outerHeight() > $(window).height() + $(window).scrollTop()) {\n        verticalOrientation = "t";\n      } else {\n        verticalOrientation = "b";\n      }\n\n      if (verticalOrientation == "t") {\n        // position the dropdown on top\n        list.addClass("ui-timepicker-positioned-top");\n        listOffset.top = self.offset().top - list.outerHeight() + parseInt(list.css("marginTop").replace("px", ""), 10);\n      } else {\n        // put it under the input\n        list.removeClass("ui-timepicker-positioned-top");\n        listOffset.top = self.offset().top + self.outerHeight() + parseInt(list.css("marginTop").replace("px", ""), 10);\n      }\n\n      list.offset(listOffset);\n\n      // position scrolling\n      var selected = list.find(".ui-timepicker-selected");\n\n      if (!selected.length) {\n        var timeInt = tp.time2int(_getTimeValue(self));\n        if (timeInt !== null) {\n          selected = _findRow(self, list, timeInt);\n        } else if (settings.scrollDefault) {\n          selected = _findRow(self, list, settings.scrollDefault());\n        }\n      }\n\n      // if not found or disabled, intelligently find first selectable element\n      if (!selected.length || selected.hasClass("ui-timepicker-disabled")) {\n        selected = list.find("li:not(.ui-timepicker-disabled):first");\n      }\n\n      if (selected && selected.length) {\n        var topOffset = list.scrollTop() + selected.position().top - selected.outerHeight();\n        list.scrollTop(topOffset);\n      } else {\n        list.scrollTop(0);\n      }\n\n      // prevent scroll propagation\n      if (settings.stopScrollPropagation) {\n        $(document).on("wheel.ui-timepicker", ".ui-timepicker-wrapper", function (e) {\n          e.preventDefault();\n          var currentScroll = $(this).scrollTop();\n          $(this).scrollTop(currentScroll + e.originalEvent.deltaY);\n        });\n      }\n\n      // attach close handlers\n      $(document).on("touchstart.ui-timepicker mousedown.ui-timepicker", _closeHandler);\n      $(window).on("resize.ui-timepicker", _closeHandler);\n      if (settings.closeOnWindowScroll) {\n        $(document).on("scroll.ui-timepicker", _closeHandler);\n      }\n\n      self.trigger("showTimepicker");\n\n      return this;\n    },\n\n    hide: function hide(e) {\n      var self = $(this);\n      var settings = self.data("timepicker-settings");\n\n      if (settings && settings.useSelect) {\n        self.blur();\n      }\n\n      $(".ui-timepicker-wrapper").each(function () {\n        var list = $(this);\n        if (!_isVisible(list)) {\n          return;\n        }\n\n        var self = list.data("timepicker-input");\n        var settings = self.data("timepicker-settings");\n\n        if (settings && settings.selectOnBlur) {\n          _selectValue(self);\n        }\n\n        list.hide();\n        self.trigger("hideTimepicker");\n      });\n\n      return this;\n    },\n\n    option: function option(key, value) {\n      if (typeof key == "string" && typeof value == "undefined") {\n        return $(this).data("timepicker-settings")[key];\n      }\n\n      return this.each(function () {\n        var self = $(this);\n        var settings = self.data("timepicker-settings");\n        var tp = self.data("timepicker-obj");\n        var list = self.data("timepicker-list");\n\n        if ((typeof key === \'undefined\' ? \'undefined\' : _typeof(key)) == "object") {\n          settings = $.extend(settings, key);\n        } else if (typeof key == "string") {\n          settings[key] = value;\n        }\n\n        settings = tp.parseSettings(settings);\n\n        self.data("timepicker-settings", settings);\n\n        _formatValue.call(self.get(0), { type: "change" }, "initial");\n\n        if (list) {\n          list.remove();\n          self.data("timepicker-list", false);\n        }\n\n        if (settings.useSelect) {\n          _render(self);\n        }\n      });\n    },\n\n    getSecondsFromMidnight: function getSecondsFromMidnight() {\n      var self = $(this);\n      var tp = self.data("timepicker-obj");\n      return tp.time2int(_getTimeValue(this));\n    },\n\n    getTime: function getTime(relative_date) {\n      var self = $(this);\n      var tp = self.data("timepicker-obj");\n\n      var time_string = _getTimeValue(self);\n      if (!time_string) {\n        return null;\n      }\n\n      var offset = tp.time2int(time_string);\n      if (offset === null) {\n        return null;\n      }\n\n      if (!relative_date) {\n        relative_date = new Date();\n      }\n\n      // construct a Date from relative date, and offset\'s time\n      var time = new Date(relative_date);\n      time.setHours(offset / 3600);\n      time.setMinutes(offset % 3600 / 60);\n      time.setSeconds(offset % 60);\n      time.setMilliseconds(0);\n\n      return time;\n    },\n\n    isVisible: function isVisible() {\n      var self = this;\n      var list = self.data("timepicker-list");\n      return !!(list && _isVisible(list));\n    },\n\n    setTime: function setTime(value) {\n      var self = this;\n      var settings = self.data("timepicker-settings");\n      var tp = self.data("timepicker-obj");\n\n      tp.seconds = tp.time2int(value);\n\n      if (settings.forceRoundTime) {\n        var prettyTime = _roundAndFormatTime(tp.seconds, settings);\n      } else {\n        var prettyTime = _int2time(tp.seconds, settings);\n      }\n\n      if (value && prettyTime === null && settings.noneOption) {\n        prettyTime = value;\n      }\n\n      _setTimeValue(self, prettyTime, "initial");\n      _formatValue.call(self.get(0), { type: "change" }, "initial");\n\n      if (self.data("timepicker-list")) {\n        _setSelected(self, self.data("timepicker-list"));\n      }\n\n      return this;\n    },\n\n    remove: function remove() {\n      var self = this;\n\n      // check if this element is a timepicker\n      if (!self.hasClass("ui-timepicker-input")) {\n        return;\n      }\n\n      var settings = self.data("timepicker-settings");\n      self.removeAttr("autocomplete", "off");\n      self.removeClass("ui-timepicker-input");\n      self.removeData("timepicker-settings");\n      self.removeData("timepicker-obj");\n      self.off(".timepicker");\n\n      // timepicker-list won\'t be present unless the user has interacted with this timepicker\n      if (self.data("timepicker-list")) {\n        self.data("timepicker-list").remove();\n      }\n\n      if (settings.useSelect) {\n        self.show();\n      }\n\n      self.removeData("timepicker-list");\n\n      return this;\n    }\n  };\n\n  // private methods\n\n  function _isVisible(elem) {\n    var el = elem[0];\n    return el.offsetWidth > 0 && el.offsetHeight > 0;\n  }\n\n  function _render(self) {\n    var settings = self.data("timepicker-settings");\n    var list = self.data("timepicker-list");\n    var tp = self.data("timepicker-obj");\n\n    if (list && list.length) {\n      list.remove();\n      self.data("timepicker-list", false);\n    }\n\n    if (settings.useSelect) {\n      list = $("<select />", { class: "ui-timepicker-select" });\n      var wrapped_list = list;\n    } else {\n      list = $("<ul />", { class: "ui-timepicker-list" });\n\n      var wrapped_list = $("<div />", {\n        class: "ui-timepicker-wrapper",\n        tabindex: -1\n      });\n      wrapped_list.css({ display: "none", position: "absolute" }).append(list);\n    }\n\n    if (settings.noneOption) {\n      if (settings.noneOption === true) {\n        settings.noneOption = settings.useSelect ? "Time..." : "None";\n      }\n\n      if ($.isArray(settings.noneOption)) {\n        for (var i in settings.noneOption) {\n          if (parseInt(i, 10) == i) {\n            var noneElement = _generateNoneElement(settings.noneOption[i], settings.useSelect);\n            list.append(noneElement);\n          }\n        }\n      } else {\n        var noneElement = _generateNoneElement(settings.noneOption, settings.useSelect);\n        list.append(noneElement);\n      }\n    }\n\n    if (settings.className) {\n      wrapped_list.addClass(settings.className);\n    }\n\n    if ((settings.minTime !== null || settings.durationTime !== null) && settings.showDuration) {\n      var stepval = typeof settings.step == "function" ? "function" : settings.step;\n      wrapped_list.addClass("ui-timepicker-with-duration");\n      wrapped_list.addClass("ui-timepicker-step-" + settings.step);\n    }\n\n    var durStart = settings.minTime;\n    if (typeof settings.durationTime === "function") {\n      durStart = tp.time2int(settings.durationTime());\n    } else if (settings.durationTime !== null) {\n      durStart = settings.durationTime;\n    }\n    var start = settings.minTime !== null ? settings.minTime : 0;\n    var end = settings.maxTime !== null ? settings.maxTime : start + _constants.ONE_DAY - 1;\n\n    if (end < start) {\n      // make sure the end time is greater than start time, otherwise there will be no list to show\n      end += _constants.ONE_DAY;\n    }\n\n    if (end === _constants.ONE_DAY - 1 && $.type(settings.timeFormat) === "string" && settings.show2400) {\n      // show a 24:00 option when using military time\n      end = _constants.ONE_DAY;\n    }\n\n    var dr = settings.disableTimeRanges;\n    var drCur = 0;\n    var drLen = dr.length;\n\n    var stepFunc = settings.step;\n    if (typeof stepFunc != "function") {\n      stepFunc = function stepFunc() {\n        return settings.step;\n      };\n    }\n\n    for (var i = start, j = 0; i <= end; j++, i += stepFunc(j) * 60) {\n      var timeInt = i;\n      var timeString = _int2time(timeInt, settings);\n\n      if (settings.useSelect) {\n        var row = $("<option />", { value: timeString });\n        row.text(timeString);\n      } else {\n        var row = $("<li />");\n        row.addClass(timeInt % _constants.ONE_DAY < _constants.ONE_DAY / 2 ? "ui-timepicker-am" : "ui-timepicker-pm");\n        row.data("time", (0, _rounding2.default)(timeInt, settings));\n        row.text(timeString);\n      }\n\n      if ((settings.minTime !== null || settings.durationTime !== null) && settings.showDuration) {\n        var durationString = _int2duration(i - durStart, settings.step);\n        if (settings.useSelect) {\n          row.text(row.text() + " (" + durationString + ")");\n        } else {\n          var duration = $("<span />", { class: "ui-timepicker-duration" });\n          duration.text(" (" + durationString + ")");\n          row.append(duration);\n        }\n      }\n\n      if (drCur < drLen) {\n        if (timeInt >= dr[drCur][1]) {\n          drCur += 1;\n        }\n\n        if (dr[drCur] && timeInt >= dr[drCur][0] && timeInt < dr[drCur][1]) {\n          if (settings.useSelect) {\n            row.prop("disabled", true);\n          } else {\n            row.addClass("ui-timepicker-disabled");\n          }\n        }\n      }\n\n      list.append(row);\n    }\n\n    wrapped_list.data("timepicker-input", self);\n    self.data("timepicker-list", wrapped_list);\n\n    if (settings.useSelect) {\n      if (self.val()) {\n        list.val(_roundAndFormatTime(tp.time2int(self.val()), settings));\n      }\n\n      list.on("focus", function () {\n        $(this).data("timepicker-input").trigger("showTimepicker");\n      });\n      list.on("blur", function () {\n        $(this).data("timepicker-input").trigger("hideTimepicker");\n      });\n      list.on("change", function () {\n        _setTimeValue(self, $(this).val(), "select");\n      });\n\n      _setTimeValue(self, list.val(), "initial");\n      self.hide().after(list);\n    } else {\n      var appendTo = settings.appendTo;\n      if (typeof appendTo === "string") {\n        appendTo = $(appendTo);\n      } else if (typeof appendTo === "function") {\n        appendTo = appendTo(self);\n      }\n      appendTo.append(wrapped_list);\n      _setSelected(self, list);\n\n      list.on("mousedown click", "li", function (e) {\n        // hack: temporarily disable the focus handler\n        // to deal with the fact that IE fires \'focus\'\n        // events asynchronously\n        self.off("focus.timepicker");\n        self.on("focus.timepicker-ie-hack", function () {\n          self.off("focus.timepicker-ie-hack");\n          self.on("focus.timepicker", methods.show);\n        });\n\n        if (!_hideKeyboard(self)) {\n          self[0].focus();\n        }\n\n        // make sure only the clicked row is selected\n        list.find("li").removeClass("ui-timepicker-selected");\n        $(this).addClass("ui-timepicker-selected");\n\n        if (_selectValue(self)) {\n          self.trigger("hideTimepicker");\n\n          list.on("mouseup.timepicker click.timepicker", "li", function (e) {\n            list.off("mouseup.timepicker click.timepicker");\n            wrapped_list.hide();\n          });\n        }\n      });\n    }\n  }\n\n  function _generateNoneElement(optionValue, useSelect) {\n    var label, className, value;\n\n    if ((typeof optionValue === \'undefined\' ? \'undefined\' : _typeof(optionValue)) == "object") {\n      label = optionValue.label;\n      className = optionValue.className;\n      value = optionValue.value;\n    } else if (typeof optionValue == "string") {\n      label = optionValue;\n      value = \'\';\n    } else {\n      $.error("Invalid noneOption value");\n    }\n\n    if (useSelect) {\n      return $("<option />", {\n        value: value,\n        class: className,\n        text: label\n      });\n    } else {\n      return $("<li />", {\n        class: className,\n        text: label\n      }).data("time", String(value));\n    }\n  }\n\n  function _roundAndFormatTime(seconds, settings) {\n    seconds = settings.roundingFunction(seconds, settings);\n    if (seconds !== null) {\n      return _int2time(seconds, settings);\n    }\n  }\n\n  // event handler to decide whether to close timepicker\n  function _closeHandler(e) {\n    if (e.target == window) {\n      // mobile Chrome fires focus events against window for some reason\n      return;\n    }\n\n    var target = $(e.target);\n\n    if (target.closest(".ui-timepicker-input").length || target.closest(".ui-timepicker-wrapper").length) {\n      // active timepicker was focused. ignore\n      return;\n    }\n\n    methods.hide();\n    $(document).unbind(".ui-timepicker");\n    $(window).unbind(".ui-timepicker");\n  }\n\n  function _hideKeyboard(self) {\n    var settings = self.data("timepicker-settings");\n    return (window.navigator.msMaxTouchPoints || "ontouchstart" in document) && settings.disableTouchKeyboard;\n  }\n\n  function _findRow(self, list, value) {\n    if (!value && value !== 0) {\n      return false;\n    }\n\n    var settings = self.data("timepicker-settings");\n    var out = false;\n    var value = settings.roundingFunction(value, settings);\n\n    // loop through the menu items\n    list.find("li").each(function (i, obj) {\n      var jObj = $(obj);\n      if (typeof jObj.data("time") != "number") {\n        return;\n      }\n\n      if (jObj.data("time") == value) {\n        out = jObj;\n        return false;\n      }\n    });\n\n    return out;\n  }\n\n  function _setSelected(self, list) {\n    list.find("li").removeClass("ui-timepicker-selected");\n\n    var settings = self.data("timepicker-settings");\n    var tp = self.data("timepicker-obj");\n    var timeValue = tp.time2int(_getTimeValue(self));\n    if (timeValue === null) {\n      return;\n    }\n\n    var selected = _findRow(self, list, timeValue);\n    if (selected) {\n      var topDelta = selected.offset().top - list.offset().top;\n\n      if (topDelta + selected.outerHeight() > list.outerHeight() || topDelta < 0) {\n        list.scrollTop(list.scrollTop() + selected.position().top - selected.outerHeight());\n      }\n\n      if (settings.forceRoundTime || selected.data("time") === timeValue) {\n        selected.addClass("ui-timepicker-selected");\n      }\n    }\n  }\n\n  function _formatValue(e, origin) {\n    if (origin == "timepicker") {\n      return;\n    }\n\n    var self = $(this);\n\n    if (this.value === "") {\n      _setTimeValue(self, null, origin);\n      return;\n    }\n\n    if (self.is(":focus") && (!e || e.type != "change")) {\n      return;\n    }\n\n    var settings = self.data("timepicker-settings");\n    var tp = self.data("timepicker-obj");\n    var seconds = tp.seconds;\n\n    if (seconds === null) {\n      self.trigger("timeFormatError");\n      return;\n    }\n\n    var rangeError = false;\n    // check that the time in within bounds\n    if (settings.minTime !== null && settings.maxTime !== null && (seconds < settings.minTime || seconds > settings.maxTime)) {\n      rangeError = true;\n    }\n\n    // check that time isn\'t within disabled time ranges\n    $.each(settings.disableTimeRanges, function () {\n      if (seconds >= this[0] && seconds < this[1]) {\n        rangeError = true;\n        return false;\n      }\n    });\n\n    if (settings.forceRoundTime) {\n      var roundSeconds = settings.roundingFunction(seconds, settings);\n      if (roundSeconds != seconds) {\n        seconds = roundSeconds;\n        origin = null;\n      }\n    }\n\n    var prettyTime = _int2time(seconds, settings);\n\n    if (rangeError) {\n      if (_setTimeValue(self, prettyTime, "error") || e && e.type == "change") {\n        self.trigger("timeRangeError");\n      }\n    } else {\n      _setTimeValue(self, prettyTime, origin);\n    }\n  }\n\n  function _getTimeValue(self) {\n    if (self.is("input")) {\n      return self.val();\n    } else {\n      // use the element\'s data attributes to store values\n      return self.data("ui-timepicker-value");\n    }\n  }\n\n  function _setTimeValue(self, value, source) {\n    var tp = self.data(\'timepicker-obj\');\n    tp.seconds = tp.time2int(value);\n\n    if (self.is("input")) {\n      self.val(value);\n\n      var settings = self.data("timepicker-settings");\n\n      if (settings.useSelect && source != "select") {\n        self.data("timepicker-list").val(_roundAndFormatTime(tp.time2int(value), settings));\n      }\n    }\n\n    if (self.data("ui-timepicker-value") != value) {\n      self.data("ui-timepicker-value", value);\n      if (source == "select") {\n        self.trigger("selectTime").trigger("changeTime").trigger("change", "timepicker");\n      } else if (["error", "initial"].indexOf(source) == -1) {\n        self.trigger("changeTime");\n      }\n\n      return true;\n    } else {\n      if (["error", "initial"].indexOf(source) == -1) {\n        self.trigger("selectTime");\n      }\n      return false;\n    }\n  }\n\n  /*\n  *  Filter freeform input\n  */\n  function _disableTextInputHandler(e) {\n    switch (e.keyCode) {\n      case 13: // return\n      case 9:\n        //tab\n        return;\n\n      default:\n        e.preventDefault();\n    }\n  }\n\n  /*\n  *  Keyboard navigation via arrow keys\n  */\n  function _keydownhandler(e) {\n    var self = $(this);\n    var list = self.data("timepicker-list");\n\n    if (!list || !_isVisible(list)) {\n      if (e.keyCode == 40) {\n        // show the list!\n        methods.show.call(self.get(0));\n        list = self.data("timepicker-list");\n        if (!_hideKeyboard(self)) {\n          self.focus();\n        }\n      } else {\n        return true;\n      }\n    }\n\n    switch (e.keyCode) {\n      case 13:\n        // return\n        if (_selectValue(self)) {\n          _formatValue.call(self.get(0), { type: "change" });\n          methods.hide.apply(this);\n        }\n\n        e.preventDefault();\n        return false;\n\n      case 38:\n        // up\n        var selected = list.find(".ui-timepicker-selected");\n\n        if (!selected.length) {\n          list.find("li").each(function (i, obj) {\n            if ($(obj).position().top > 0) {\n              selected = $(obj);\n              return false;\n            }\n          });\n          selected.addClass("ui-timepicker-selected");\n        } else if (!selected.is(":first-child")) {\n          selected.removeClass("ui-timepicker-selected");\n          selected.prev().addClass("ui-timepicker-selected");\n\n          if (selected.prev().position().top < selected.outerHeight()) {\n            list.scrollTop(list.scrollTop() - selected.outerHeight());\n          }\n        }\n\n        return false;\n\n      case 40:\n        // down\n        selected = list.find(".ui-timepicker-selected");\n\n        if (selected.length === 0) {\n          list.find("li").each(function (i, obj) {\n            if ($(obj).position().top > 0) {\n              selected = $(obj);\n              return false;\n            }\n          });\n\n          selected.addClass("ui-timepicker-selected");\n        } else if (!selected.is(":last-child")) {\n          selected.removeClass("ui-timepicker-selected");\n          selected.next().addClass("ui-timepicker-selected");\n\n          if (selected.next().position().top + 2 * selected.outerHeight() > list.outerHeight()) {\n            list.scrollTop(list.scrollTop() + selected.outerHeight());\n          }\n        }\n\n        return false;\n\n      case 27:\n        // escape\n        list.find("li").removeClass("ui-timepicker-selected");\n        methods.hide();\n        break;\n\n      case 9:\n        //tab\n        methods.hide();\n        break;\n\n      default:\n        return true;\n    }\n  }\n\n  /*\n  *\tTime typeahead\n  */\n  function _keyuphandler(e) {\n    var self = $(this);\n    var list = self.data("timepicker-list");\n    var settings = self.data("timepicker-settings");\n\n    if (!list || !_isVisible(list) || settings.disableTextInput) {\n      return true;\n    }\n\n    if (e.type === "paste" || e.type === "cut") {\n      setTimeout(function () {\n        if (settings.typeaheadHighlight) {\n          _setSelected(self, list);\n        } else {\n          list.hide();\n        }\n      }, 0);\n      return;\n    }\n\n    switch (e.keyCode) {\n      case 96: // numpad numerals\n      case 97:\n      case 98:\n      case 99:\n      case 100:\n      case 101:\n      case 102:\n      case 103:\n      case 104:\n      case 105:\n      case 48: // numerals\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n      case 65: // a\n      case 77: // m\n      case 80: // p\n      case 186: // colon\n      case 8: // backspace\n      case 46:\n        // delete\n        if (settings.typeaheadHighlight) {\n          _setSelected(self, list);\n        } else {\n          list.hide();\n        }\n        break;\n    }\n  }\n\n  function _selectValue(self) {\n    var settings = self.data("timepicker-settings");\n    var list = self.data("timepicker-list");\n    var timeValue = null;\n\n    var cursor = list.find(".ui-timepicker-selected");\n\n    if (cursor.hasClass("ui-timepicker-disabled")) {\n      return false;\n    }\n\n    if (cursor.length) {\n      // selected value found\n      timeValue = cursor.data("time");\n    }\n\n    if (timeValue !== null) {\n      if (typeof timeValue != "string") {\n        timeValue = _int2time(timeValue, settings);\n      }\n\n      _setTimeValue(self, timeValue, "select");\n    }\n\n    return true;\n  }\n\n  function _int2duration(seconds, step) {\n    seconds = Math.abs(seconds);\n    var minutes = Math.round(seconds / 60),\n        duration = [],\n        hours,\n        mins;\n\n    if (minutes < 60) {\n      // Only show (x mins) under 1 hour\n      duration = [minutes, _lang.mins];\n    } else {\n      hours = Math.floor(minutes / 60);\n      mins = minutes % 60;\n\n      // Show decimal notation (eg: 1.5 hrs) for 30 minute steps\n      if (step == 30 && mins == 30) {\n        hours += _lang.decimal + 5;\n      }\n\n      duration.push(hours);\n      duration.push(hours == 1 ? _lang.hr : _lang.hrs);\n\n      // Show remainder minutes notation (eg: 1 hr 15 mins) for non-30 minute steps\n      // and only if there are remainder minutes to show\n      if (step != 30 && mins) {\n        duration.push(mins);\n        duration.push(_lang.mins);\n      }\n    }\n\n    return duration.join(" ");\n  }\n\n  function _int2time(timeInt, settings) {\n    if (typeof timeInt != "number") {\n      return null;\n    }\n\n    var seconds = parseInt(timeInt % 60),\n        minutes = parseInt(timeInt / 60 % 60),\n        hours = parseInt(timeInt / (60 * 60) % 24);\n\n    var time = new Date(1970, 0, 2, hours, minutes, seconds, 0);\n\n    if (isNaN(time.getTime())) {\n      return null;\n    }\n\n    if ($.type(settings.timeFormat) === "function") {\n      return settings.timeFormat(time);\n    }\n\n    var output = "";\n    var hour, code;\n    for (var i = 0; i < settings.timeFormat.length; i++) {\n      code = settings.timeFormat.charAt(i);\n      switch (code) {\n        case "a":\n          output += time.getHours() > 11 ? _lang.pm : _lang.am;\n          break;\n\n        case "A":\n          output += time.getHours() > 11 ? _lang.PM : _lang.AM;\n          break;\n\n        case "g":\n          hour = time.getHours() % 12;\n          output += hour === 0 ? "12" : hour;\n          break;\n\n        case "G":\n          hour = time.getHours();\n          if (timeInt === _constants.ONE_DAY) hour = settings.show2400 ? 24 : 0;\n          output += hour;\n          break;\n\n        case "h":\n          hour = time.getHours() % 12;\n\n          if (hour !== 0 && hour < 10) {\n            hour = "0" + hour;\n          }\n\n          output += hour === 0 ? "12" : hour;\n          break;\n\n        case "H":\n          hour = time.getHours();\n          if (timeInt === _constants.ONE_DAY) hour = settings.show2400 ? 24 : 0;\n          output += hour > 9 ? hour : "0" + hour;\n          break;\n\n        case "i":\n          var minutes = time.getMinutes();\n          output += minutes > 9 ? minutes : "0" + minutes;\n          break;\n\n        case "s":\n          seconds = time.getSeconds();\n          output += seconds > 9 ? seconds : "0" + seconds;\n          break;\n\n        case "\\\\":\n          // escape character; add the next character and skip ahead\n          i++;\n          output += settings.timeFormat.charAt(i);\n          break;\n\n        default:\n          output += code;\n      }\n    }\n\n    return output;\n  }\n\n  function _pad2(n) {\n    return ("0" + n).slice(-2);\n  }\n\n  // Plugin entry\n  $.fn.timepicker = function (method) {\n    if (!this.length) return this;\n    if (methods[method]) {\n      // check if this element is a timepicker\n      if (!this.hasClass("ui-timepicker-input")) {\n        return this;\n      }\n      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n    } else if ((typeof method === \'undefined\' ? \'undefined\' : _typeof(method)) === "object" || !method) {\n      return methods.init.apply(this, arguments);\n    } else {\n      $.error("Method " + method + " does not exist on jQuery.timepicker");\n    }\n  };\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,exports){eval('module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif(!module.children) module.children = [];\n\t\tObject.defineProperty(module, "loaded", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, "id", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZighbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _defaults = __webpack_require__(6);\n\nvar _constants = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nvar Timepicker = function () {\n  function Timepicker(targetEl) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Timepicker);\n\n    var attrOptions = Timepicker.extractAttrOptions(targetEl, Object.keys(_defaults.DEFAULT_SETTINGS));\n\n    this.settings = this.parseSettings(_extends({}, _defaults.DEFAULT_SETTINGS, options, attrOptions));\n\n    if (targetEl.value) {\n      this.seconds = this.time2int(targetEl.value);\n    }\n  }\n\n  _createClass(Timepicker, [{\n    key: \'_setSeconds\',\n\n\n    // TODO finish this function\n    value: function _setSeconds(seconds) {\n      if (this.settings.forceRoundTime) {\n        seconds = this.settings.roundingFunction(seconds, this.settings);\n      }\n\n      this.seconds = seconds;\n    }\n  }, {\n    key: \'time2int\',\n    value: function time2int(timeString) {\n      if (timeString === "" || timeString === null || timeString === undefined) return null;\n      if (timeString instanceof Date) {\n        return timeString.getHours() * 3600 + timeString.getMinutes() * 60 + timeString.getSeconds();\n      }\n      if (timeString instanceof String) {\n        return timeString;\n      }\n\n      timeString = timeString.toLowerCase().replace(/[\\s\\.]/g, "");\n\n      // if the last character is an "a" or "p", add the "m"\n      if (timeString.slice(-1) == "a" || timeString.slice(-1) == "p") {\n        timeString += "m";\n      }\n\n      var ampmRegex = "(" + this.settings.lang.am.replace(".", "") + "|" + this.settings.lang.pm.replace(".", "") + "|" + this.settings.lang.AM.replace(".", "") + "|" + this.settings.lang.PM.replace(".", "") + ")?";\n\n      // try to parse time input\n      var pattern = new RegExp("^" + ampmRegex + "([0-9]?[0-9])\\\\W?([0-5][0-9])?\\\\W?([0-5][0-9])?" + ampmRegex + "$");\n\n      var time = timeString.match(pattern);\n      if (!time) {\n        return null;\n      }\n\n      var hour = parseInt(time[2] * 1, 10);\n      var ampm = time[1] || time[5];\n      var hours = hour;\n      var minutes = time[3] * 1 || 0;\n      var seconds = time[4] * 1 || 0;\n\n      if (hour <= 12 && ampm) {\n        var isPm = ampm == this.settings.lang.pm || ampm == this.settings.lang.PM;\n\n        if (hour == 12) {\n          hours = isPm ? 12 : 0;\n        } else {\n          hours = hour + (isPm ? 12 : 0);\n        }\n      } else {\n        var t = hour * 3600 + minutes * 60 + seconds;\n        if (t >= _constants.ONE_DAY + (this.settings.show2400 ? 1 : 0)) {\n          if (this.settings.wrapHours === false) {\n            return null;\n          }\n\n          hours = hour % 24;\n        }\n      }\n\n      var timeInt = hours * 3600 + minutes * 60 + seconds;\n\n      // if no am/pm provided, intelligently guess based on the scrollDefault\n      if (hour < 12 && !ampm && this.settings._twelveHourTime && this.settings.scrollDefault) {\n        var delta = timeInt - this.settings.scrollDefault();\n        if (delta < 0 && delta >= _constants.ONE_DAY / -2) {\n          timeInt = (timeInt + _constants.ONE_DAY / 2) % _constants.ONE_DAY;\n        }\n      }\n\n      return timeInt;\n    }\n  }, {\n    key: \'parseDisableTimeRanges\',\n    value: function parseDisableTimeRanges(rawRanges) {\n      var _this = this;\n\n      if (!rawRanges || rawRanges.length == 0) {\n        return [];\n      }\n\n      // convert times to int\n      var intRanges = rawRanges.map(function (pair) {\n        return pair.map(function (time) {\n          return _this.time2int(time);\n        });\n      });\n\n      return Timepicker.mergeRanges(intRanges);\n    }\n  }, {\n    key: \'parseSettings\',\n    value: function parseSettings(settings) {\n      var _this2 = this;\n\n      settings.lang = _extends({}, _defaults.DEFAULT_LANG, settings.lang);\n\n      // lang is used by other functions the rest of this depends on\n      // todo: unwind circular dependency on lang\n      this.settings = settings;\n\n      if (settings.minTime) {\n        settings.minTime = this.time2int(settings.minTime);\n      }\n\n      if (settings.maxTime) {\n        settings.maxTime = this.time2int(settings.maxTime);\n      }\n\n      if (settings.durationTime && typeof settings.durationTime !== "function") {\n        settings.durationTime = this.time2int(settings.durationTime);\n      }\n\n      if (settings.scrollDefault == "now") {\n        settings.scrollDefault = function () {\n          return settings.roundingFunction(_this2.time2int(new Date()), settings);\n        };\n      } else if (settings.scrollDefault && typeof settings.scrollDefault != "function") {\n        var val = settings.scrollDefault;\n        settings.scrollDefault = function () {\n          return settings.roundingFunction(_this2.time2int(val), settings);\n        };\n      } else if (settings.minTime) {\n        settings.scrollDefault = function () {\n          return settings.roundingFunction(settings.minTime, settings);\n        };\n      }\n\n      if (typeof settings.timeFormat === "string" && settings.timeFormat.match(/[gh]/)) {\n        settings._twelveHourTime = true;\n      }\n\n      if (settings.showOnFocus === false && settings.showOn.indexOf("focus") != -1) {\n        settings.showOn.splice(settings.showOn.indexOf("focus"), 1);\n      }\n\n      settings.disableTimeRanges = this.parseDisableTimeRanges(settings.disableTimeRanges);\n      return settings;\n    }\n  }], [{\n    key: \'extractAttrOptions\',\n    value: function extractAttrOptions(element, keys) {\n      var output = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n\n          // console.log(key, element)\n          if (key in element.dataset) {\n            output[key] = element.dataset[key];\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return output;\n    }\n  }, {\n    key: \'mergeRanges\',\n    value: function mergeRanges(ranges) {\n      // sort by starting time\n      var sortedRanges = ranges.sort(function (a, b) {\n        return a[0] - b[0];\n      });\n\n      // merge any overlapping ranges\n      for (var i = sortedRanges.length - 1; i > 0; i--) {\n        if (sortedRanges[i][0] <= sortedRanges[i - 1][1]) {\n          sortedRanges[i - 1] = [Math.min(sortedRanges[i][0], sortedRanges[i - 1][0]), Math.max(sortedRanges[i][1], sortedRanges[i - 1][1])];\n          sortedRanges.splice(i, 1);\n        }\n      }\n\n      return sortedRanges;\n    }\n  }]);\n\n  return Timepicker;\n}();\n\nexports.default = Timepicker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_LANG = exports.DEFAULT_SETTINGS = undefined;\n\nvar _rounding = __webpack_require__(1);\n\nvar _rounding2 = _interopRequireDefault(_rounding);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DEFAULT_SETTINGS = {\n  appendTo: \"body\",\n  className: null,\n  closeOnWindowScroll: false,\n  disableTextInput: false,\n  disableTimeRanges: [],\n  disableTouchKeyboard: false,\n  durationTime: null,\n  forceRoundTime: false,\n  lang: {},\n  maxTime: null,\n  minTime: null,\n  noneOption: false,\n  orientation: \"l\",\n  roundingFunction: _rounding2.default,\n  scrollDefault: null,\n  selectOnBlur: false,\n  show2400: false,\n  showDuration: false,\n  showOn: [\"click\", \"focus\"],\n  showOnFocus: true,\n  step: 30,\n  stopScrollPropagation: false,\n  timeFormat: \"g:ia\",\n  typeaheadHighlight: true,\n  useSelect: false,\n  wrapHours: true\n};\n\nvar DEFAULT_LANG = {\n  am: 'am',\n  pm: 'pm',\n  AM: 'AM',\n  PM: 'PM',\n  decimal: '.',\n  mins: 'mins',\n  hr: 'hr',\n  hrs: 'hrs'\n};\n\nexports.DEFAULT_SETTINGS = DEFAULT_SETTINGS;\nexports.DEFAULT_LANG = DEFAULT_LANG;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdGltZXBpY2tlci9kZWZhdWx0cy5qcz84NTlhIl0sIm5hbWVzIjpbIkRFRkFVTFRfU0VUVElOR1MiLCJhcHBlbmRUbyIsImNsYXNzTmFtZSIsImNsb3NlT25XaW5kb3dTY3JvbGwiLCJkaXNhYmxlVGV4dElucHV0IiwiZGlzYWJsZVRpbWVSYW5nZXMiLCJkaXNhYmxlVG91Y2hLZXlib2FyZCIsImR1cmF0aW9uVGltZSIsImZvcmNlUm91bmRUaW1lIiwibGFuZyIsIm1heFRpbWUiLCJtaW5UaW1lIiwibm9uZU9wdGlvbiIsIm9yaWVudGF0aW9uIiwicm91bmRpbmdGdW5jdGlvbiIsInNjcm9sbERlZmF1bHQiLCJzZWxlY3RPbkJsdXIiLCJzaG93MjQwMCIsInNob3dEdXJhdGlvbiIsInNob3dPbiIsInNob3dPbkZvY3VzIiwic3RlcCIsInN0b3BTY3JvbGxQcm9wYWdhdGlvbiIsInRpbWVGb3JtYXQiLCJ0eXBlYWhlYWRIaWdobGlnaHQiLCJ1c2VTZWxlY3QiLCJ3cmFwSG91cnMiLCJERUZBVUxUX0xBTkciLCJhbSIsInBtIiwiQU0iLCJQTSIsImRlY2ltYWwiLCJtaW5zIiwiaHIiLCJocnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7O0FBRUEsSUFBTUEsbUJBQW1CO0FBQ3ZCQyxZQUFVLE1BRGE7QUFFdkJDLGFBQVcsSUFGWTtBQUd2QkMsdUJBQXFCLEtBSEU7QUFJdkJDLG9CQUFrQixLQUpLO0FBS3ZCQyxxQkFBbUIsRUFMSTtBQU12QkMsd0JBQXNCLEtBTkM7QUFPdkJDLGdCQUFjLElBUFM7QUFRdkJDLGtCQUFnQixLQVJPO0FBU3ZCQyxRQUFNLEVBVGlCO0FBVXZCQyxXQUFTLElBVmM7QUFXdkJDLFdBQVMsSUFYYztBQVl2QkMsY0FBWSxLQVpXO0FBYXZCQyxlQUFhLEdBYlU7QUFjdkJDLHNDQWR1QjtBQWV2QkMsaUJBQWUsSUFmUTtBQWdCdkJDLGdCQUFjLEtBaEJTO0FBaUJ2QkMsWUFBVSxLQWpCYTtBQWtCdkJDLGdCQUFjLEtBbEJTO0FBbUJ2QkMsVUFBUSxDQUFDLE9BQUQsRUFBVSxPQUFWLENBbkJlO0FBb0J2QkMsZUFBYSxJQXBCVTtBQXFCdkJDLFFBQU0sRUFyQmlCO0FBc0J2QkMseUJBQXVCLEtBdEJBO0FBdUJ2QkMsY0FBWSxNQXZCVztBQXdCdkJDLHNCQUFvQixJQXhCRztBQXlCdkJDLGFBQVcsS0F6Qlk7QUEwQnZCQyxhQUFXO0FBMUJZLENBQXpCOztBQTZCQSxJQUFNQyxlQUFlO0FBQ25CQyxNQUFJLElBRGU7QUFFbkJDLE1BQUksSUFGZTtBQUduQkMsTUFBSSxJQUhlO0FBSW5CQyxNQUFJLElBSmU7QUFLbkJDLFdBQVMsR0FMVTtBQU1uQkMsUUFBTSxNQU5hO0FBT25CQyxNQUFJLElBUGU7QUFRbkJDLE9BQUs7QUFSYyxDQUFyQjs7UUFXU25DLGdCLEdBQUFBLGdCO1FBQWtCMkIsWSxHQUFBQSxZIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcm91bmRpbmdGdW5jdGlvbiBmcm9tICcuL3JvdW5kaW5nJ1xuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTID0ge1xuICBhcHBlbmRUbzogXCJib2R5XCIsXG4gIGNsYXNzTmFtZTogbnVsbCxcbiAgY2xvc2VPbldpbmRvd1Njcm9sbDogZmFsc2UsXG4gIGRpc2FibGVUZXh0SW5wdXQ6IGZhbHNlLFxuICBkaXNhYmxlVGltZVJhbmdlczogW10sXG4gIGRpc2FibGVUb3VjaEtleWJvYXJkOiBmYWxzZSxcbiAgZHVyYXRpb25UaW1lOiBudWxsLFxuICBmb3JjZVJvdW5kVGltZTogZmFsc2UsXG4gIGxhbmc6IHt9LFxuICBtYXhUaW1lOiBudWxsLFxuICBtaW5UaW1lOiBudWxsLFxuICBub25lT3B0aW9uOiBmYWxzZSxcbiAgb3JpZW50YXRpb246IFwibFwiLFxuICByb3VuZGluZ0Z1bmN0aW9uLFxuICBzY3JvbGxEZWZhdWx0OiBudWxsLFxuICBzZWxlY3RPbkJsdXI6IGZhbHNlLFxuICBzaG93MjQwMDogZmFsc2UsXG4gIHNob3dEdXJhdGlvbjogZmFsc2UsXG4gIHNob3dPbjogW1wiY2xpY2tcIiwgXCJmb2N1c1wiXSxcbiAgc2hvd09uRm9jdXM6IHRydWUsXG4gIHN0ZXA6IDMwLFxuICBzdG9wU2Nyb2xsUHJvcGFnYXRpb246IGZhbHNlLFxuICB0aW1lRm9ybWF0OiBcImc6aWFcIixcbiAgdHlwZWFoZWFkSGlnaGxpZ2h0OiB0cnVlLFxuICB1c2VTZWxlY3Q6IGZhbHNlLFxuICB3cmFwSG91cnM6IHRydWVcbn07XG5cbmNvbnN0IERFRkFVTFRfTEFORyA9IHtcbiAgYW06ICdhbScsXG4gIHBtOiAncG0nLFxuICBBTTogJ0FNJyxcbiAgUE06ICdQTScsXG4gIGRlY2ltYWw6ICcuJyxcbiAgbWluczogJ21pbnMnLFxuICBocjogJ2hyJyxcbiAgaHJzOiAnaHJzJ1xufTtcblxuZXhwb3J0IHsgREVGQVVMVF9TRVRUSU5HUywgREVGQVVMVF9MQU5HIH07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdGltZXBpY2tlci9kZWZhdWx0cy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n")}]);
